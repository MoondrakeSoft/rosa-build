RosaABF.controller('BuildListsController', ['$scope', 'BuildListsService', '$location', '$interval', '$uibModal',
function($scope, BuildListsService, $location, $interval, $uibModal) {
  $scope.params          = null;
  $scope.build_lists     = [];
  $scope.isRequest       = false; // Disable 'Search' button
  $scope.opened          = {};

  var selectedProject = "";
  var refresh, is_autoreload_on;
  var default_filters = {page: '1', per_page: '25', 'ownership': 'everything'};

  $scope.setAutoreload = function(autoreload) {
    is_autoreload_on = autoreload;
    if(autoreload) {
      if(refresh) {
        $interval.cancel(refresh);
      }
      refresh = $interval(function() { $scope.getBuildLists() }, 60000);
    }
    else if(!autoreload && refresh) {
      $interval.cancel(refresh);
      refresh = null;
    }
  }

  $scope.getBuildLists = function(project) {
    if ($scope.isRequest) {
      return;
    }

    if(selectedProject) {
      project = selectedProject;
    }
    else {
      selectedProject = project;
    }

    $scope.widgetTitle = project;
    $scope.isRequest = true;

    var filter = Object.assign(Object.create(null), default_filters, $location.search());
    var fixed_filter = Object.create(null);
    _.map(filter, function(val, key) {
      if(key != "page" && key != "per_page") {
        fixed_filter['filter[' + key + ']'] = val;
      }
      else {
        fixed_filter[key] = val;
      }
    });

    BuildListsService.getBuildLists(fixed_filter, project).then(function(res) {
      _.each(res.build_lists, function(item) {
        if(item.hasRelated) {
          var chevronHtml = "";
          _.each(item.related, function(rel) {
            chevronHtml += "<div class=\"status bg-"+rel.status_color+"\">&nbsp;</div>";
          });
          item.chevronHtml = chevronHtml;
        }
        if(item.id in $scope.opened) {
          $scope.showRelated(item);
        }
      });

      $scope.build_lists = res.build_lists;
      $scope.page = res.page;
      $scope.total_items = res.total_items;
      $location.search(Object.assign(filter, res.filter));
      $scope.per_page = filter.per_page;
      $scope.isRequest = false;
    });
  }

  $scope.showRelated = function(build_list) {
    build_list.relatedHidden = false;
    $scope.opened[build_list.id] = true;
    _.each(build_list.related, function(bl){
      bl.show = true;
    });
  }

  $scope.hideRelated = function(build_list) {
    build_list.relatedHidden = true;
    delete $scope.opened[build_list.id];
    _.each(build_list.related, function(bl){
      bl.show = false;
    });
    build_list.show = true;
  }

  $scope.openFilters = function() {
    var turn_back_on = is_autoreload_on;
    $scope.setAutoreload(false);

    var FilterModalInstance = $uibModal.open({
      animation: $scope.animationsEnabled,
      templateUrl: 'build_list_filters.html',
      controller: 'FiltersInstanceController',
      size: 'lg',
      resolve: {
        params: function() {
          var ls = $location.search();
          var res = {};
          for(var i in ls) {
            if(ls.hasOwnProperty(i)) {
              res[i] = ls[i].toString();
            }
          }

          return res;
        }
      }
    });

    FilterModalInstance.result.then(function(ret) {
      $location.search(ret);

      $scope.getBuildLists();
    }, function(reason) {
      if(reason == 'reset') {
        $location.search(default_filters);

        $scope.getBuildLists();
      }
    }).finally(function() {
      $scope.setAutoreload(turn_back_on);
    });
  }

  $scope.goToPage = function(number) {
    $location.search('page', number);
    $scope.getBuildLists();
  }

  $scope.setAutoreload(true);
}]);

RosaABF.controller('FiltersInstanceController', ['$scope', '$uibModalInstance', 'params',
function($scope, $uibModalInstance, params) {
  console.log(params);
  $scope.params = params;

  $scope.apply = function() {
    $uibModalInstance.close($scope.params);
  }

  $scope.reset = function() {
    $uibModalInstance.dismiss('reset');
  }
}]);